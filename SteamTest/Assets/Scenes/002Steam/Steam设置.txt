/*

Steamworks: https://partner.steamgames.com/
Steamworks.NET: https://steamworks.github.io/

https://github.com/rlabrecque/Steamworks.NET

在Unity中接入Steam SDK（通过Steamworks.NET）是集成Steam平台功能（如成就、云存档、支付等）的核心步骤。以下是基于官方文档和社区实践的完整流程：

🔧 ​​一、准备工作​​
​​注册Steamworks开发者账号​​
访问 Steamworks官网，注册并完成开发者资质审核（需支付100美元）。
​​创建应用并获取App ID​​
登录Steamworks后台 → ​​创建新应用​​ → 填写游戏信息 → 保存后获得唯一的 ​​App ID​​（数字标识）。
​​下载必要资源​​：
​​Steamworks SDK​​：从Steamworks后台下载最新版SDK（解压备用）。
​​Steamworks.NET插件​​：从GitHub下载 Steamworks.NET.unitypackage（推荐最新稳定版）。
⚙️ ​​二、集成步骤​​
​​1. 导入Steamworks.NET到Unity项目​​
打开Unity项目 → Assets → Import Package → Custom Package → 选择下载的 Steamworks.NET.unitypackage → 导入全部文件。
​​2. 配置Steamworks SDK文件​​
将下载的 ​​Steamworks SDK​​ 中的以下文件复制到Unity项目：
steam_api.dll（Windows）或 libsteam_api.dylib（macOS）
放置路径：Assets/Plugins/（若目录不存在则手动创建）。
​​3. 设置App ID​​
​​方法1（推荐）​​：
在项目根目录（与Assets同级）创建文本文件 steam_appid.txt → 内容填写你的App ID（如 480）。
​​方法2（代码初始化）​​：
修改 SteamManager.cs 脚本中的初始化代码：
// 在SteamManager.Init()方法中替换为你的App ID
if (SteamAPI.RestartAppIfNecessary(new AppId_t(你的AppID))) {
    Application.Quit();
    return;
}
[3](@ref)
​​4. 初始化SteamAPI​​
在场景中创建空物体 → 挂载 SteamManager 脚本（该脚本在导入Steamworks.NET后自动生成）。
测试初始化是否成功：
void Start() {
    if (SteamManager.Initialized) {
        string userName = SteamFriends.GetPersonaName();
        Debug.Log("Steam用户名: " + userName); // 成功则输出用户名
    }
}
🛠️ ​​三、实现Steam功能（示例）​​
​​1. 解锁成就​​
if (SteamManager.Initialized) {
    SteamUserStats.SetAchievement("ACH_WIN_10_GAMES"); // 成就ID需在Steamworks后台配置
    SteamUserStats.StoreStats(); // 保存成就状态
}
​​2. 云存档存储​​
// 写入存档
SteamRemoteStorage.FileWrite("save.dat", System.Text.Encoding.UTF8.GetBytes("存档数据"));

// 读取存档
byte[] data = SteamRemoteStorage.FileRead("save.dat");
string saveData = System.Text.Encoding.UTF8.GetString(data);
​​3. Steam支付集成（内购）​​
在Steamworks后台配置商品信息（如道具ID、价格）。
调用支付接口：
SteamMicroTransactions.Init(你的AppID); // 初始化支付
SteamMicroTransactions.StartPurchase("商品ID"); // 发起购买
⚠️ ​​四、调试与常见问题​​
​​问题​​	​​解决方案​​
SteamManager.Initialized=false	- 确保Steam客户端已运行并登录
- 检查 steam_appid.txt 是否存在且App ID正确
成就/统计不更新	- 调用 SteamUserStats.StoreStats() 保存数据
- 后台检查成就配置是否发布
支付回调失败	- 验证商品ID是否在Steamworks后台注册
- 检查网络连接（SteamAPI需在线）
跨平台库缺失（Linux/macOS）	将对应平台的 libsteam_api.so（Linux）或 libsteam_api.dylib（macOS）放入 Assets/Plugins
📦 ​​五、游戏上传到Steam​​
使用Steamworks SDK中的 ​​ContentBuilder工具​​：
配置 scripts/app_build_xxx.vdf 文件，指定App ID和游戏文件路径。
通过命令行工具 steamcmd.exe 登录并上传：
login 开发者账号 密码
run_app_build 路径/app_build_xxx.vdf

-------------------------------------------------------------------------------------------------------------------

 Steamworks.NET：针对 Unity/C# 的“快捷适配器”​​
​​作用​​：
基于 Steamworks SDK 的​​开源封装库​​（C# 编写），将复杂的 C++ API 转化为 Unity/C# 可直接调用的接口。相当于给发动机加装“方向盘和油门”。
​​特点​​：
​​语言​​：专为 C# 和 Unity 优化，代码简洁（例如 SteamUserStats.SetAchievement("成就ID") 即可解锁成就）。
​​易用性​​：直接导入 Unity 项目，自动处理依赖，无需手动编译或配置原生库。
​​功能覆盖​​：支持成就、云存档、好友系统等常用功能，但深度定制需结合 SDK
-------------------------------------------------------------------------------------------------------------------
S
SteamAPI.Init() ：检查 steam_appid.txt 是否存在且 App ID 正确;建立游戏与 Steam 客户端的连接
steamUser.BLoggedOn：用于检测玩家是否通过steam客户端登录并完成身份验证

//建议在返回 false 时添加重试逻辑或引导用户手动启动 Steam：
if (!SteamUser.BLoggedOn()) {
    Application.OpenURL("steam://run/123456"); // 123456 替换为真实 App ID
    Application.Quit();
}

SteamApps.BIsSubscribedApp 是 ​​Steamworks API​​ 中的一个关键函数，主要用于检测当前登录的Steam用户是否拥有（订阅）指定AppID的游戏或软件许可证

-------------------------------------------------------------------------------------------------------------------

Steam的App ID（应用程序ID）是游戏接入Steam平台的核心标识符，其作用贯穿开发、测试、发布和运营全流程。以下是其核心作用及技术细节

​1. 身份验证与平台接入​​
​​唯一身份标识​​：每个Steam游戏拥有唯一的App ID（如480为测试ID），用于区分不同游戏，确保Steam服务正确关联到对应项目。
​​初始化SteamAPI​​：在Unity中，需通过SteamManager脚本初始化Steamworks SDK，而​​App ID是初始化的必要条件​​。
若ID错误或缺失，SteamAPI将无法启动，导致成就、云存档等功能失效。
​​测试与调试​​：开发阶段可在steam_appid.txt中配置App ID（默认480为测试ID），使游戏在未发布时也能调用Steam基础功能（如获取用户名）

如果 Steam 未运行或者游戏并非通过 Steam 启动，SteamAPI_RestartAppIfNecessary 将启动 Steam 客户端，并且如果用户拥有该游戏，还会重新启动该游戏。
这可以作为一种基本的数字版权管理（DRM）形式。请注意，这将运行您在 Steam 中安装的任何版本。这可能并非我们当前正在运行的精确可执行文件。
一旦您从 Valve 处获得 Steam 应用 ID，就需要将其替换掉 AppId_t.Invalid，并从游戏仓库中移除 steam_appid.txt。例如：“(AppId_t)480” 或 “new AppId_t(480)”


编辑器模式下：重启app.steam_appid.txt 里的数据改成正确的才能初始化成功
没有重启app.        steam.appid.txt好像不会生效了
猜测：RedistInstall.cs脚本没有steam_appid.txt时会生成一个，并赋值480进去。 游戏内部好像是默认先调用这个txt里的数据，不存在txt的时候，
调用传进去的数据。来斤逻辑驱动。 如果旧的appid没有正常执行，改appid再次执行成功后，再换回依旧能正常执行

等待测试：
构建阶段：删除文件 + 代码硬编码 App ID

​​测试启动流程​​
安装正式版游戏后，尝试直接双击 .exe 文件，​​应自动触发 Steam 客户端启动并验证权限​​。若游戏能独立运行，说明 steam_appid.txt 未删除或 DRM 代码未生效。
​​检查功能完整性​​
确保成就解锁、云存档同步等功能在 Steam 客户端运行时正常生效
*/